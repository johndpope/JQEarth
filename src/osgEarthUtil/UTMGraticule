/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHUTIL_UTM_GRATICLE
#define OSGEARTHUTIL_UTM_GRATICLE

#include <osgEarthUtil/Common>
#include <osgEarth/MapNode>
#include <osgEarth/MapNodeObserver>
#include <osgEarth/ModelLayer>
#include <osgEarthSymbology/Style>
#include <osgEarthFeatures/Feature>
#include <osg/ClipPlane>
#include <vector>

namespace osgEarth { namespace Util
{
    using namespace osgEarth;
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * Configuration options for the geodetic graticule.
     */
    class /*header only*/ UTMGraticuleOptions : public ConfigOptions
    {
    public:
        UTMGraticuleOptions(const ConfigOptions& conf =ConfigOptions()) : ConfigOptions(conf) {
            mergeConfig(_conf);
        }
        
    public:

        /** Style for grid zone designator geometry and text */
        optional<Style>& gzdStyle() { return _gzdStyle; }
        const optional<Style>& gzdStyle() const { return _gzdStyle; }

        /** Text scale factor (default = 1) */
        optional<float>& textScale() { return _textScale; }
        const optional<float>& textScale() const { return _textScale; }

    public:
        Config getConfig() const {
            Config conf = ConfigOptions::getConfig();
            conf.key() = "utm_graticule";
            conf.addObjIfSet("gzd_style", _gzdStyle);
            conf.addIfSet("text_scale", _textScale);
            return conf;
        }

    protected:
        optional<Style> _gzdStyle;
        optional<float> _textScale;

        void mergeConfig(const Config& conf) {
            conf.getObjIfSet("gzd_style", _gzdStyle);
            conf.getIfSet("text_scale", _textScale);
        }
    };


    /**
     * UTM data (used by the UTM Graticule and the MGRS Graticule).
     */
    class OSGEARTHUTIL_EXPORT UTMData
    {
    public:
        typedef std::map<std::string, GeoExtent> SectorTable;

    public:
        UTMData() { }

        void rebuild(const Profile* profile);

        osg::Group* buildGZDTile(const std::string& name, const GeoExtent& extent, const Style& style, const FeatureProfile* featureProfile, const Map* map);

        SectorTable& sectorTable() { return _gzd; }
        const SectorTable& sectorTable() const { return _gzd; }

    private:
        SectorTable _gzd;
    };


    /**
     * Implements a UTM map graticule. 
     * This only works for geocentric maps.
     */
    class OSGEARTHUTIL_EXPORT UTMGraticule : public osg::Group,
                                             public MapNodeObserver,
                                             public UTMGraticuleOptions
    {
    public:

        /**
         * Constructs a new graticule for use with the specified map.
         *
         * @param mapnode
         *      Map with which you will use this graticule
         * @param options
         *      Optional "options" that configure the graticule. Defaults will be used
         *      if you don't specify this.
         */
        UTMGraticule( MapNode* mapNode, const UTMGraticuleOptions& options);

        /**
         * Constructs a new graticule for use with the specified map,
         * using default options.
         *
         * @param mapnode
         *      Map with which you will use this graticule
         */
        UTMGraticule( MapNode* mapNode );

        /**
         * If you change any of the options, call this to refresh the display
         * to refelct the new settings.
         */
        void refresh();

        /**
         * Sets the clip plane to use. If you don't set one, the object will
         * create both a ClipNode and ClipPlane for geocentric horizon clipping.
         * If you do set a clip plane, this object will update it automatically,
         * and we expect that you have the plane registered with an osg::ClipNode
         * elsewhere in the scene graph.
         */
        void setClipPlane(osg::ClipPlane* clipPlane);
        osg::ClipPlane* getClipPlane() const { return _clipPlane.get(); }

        
    public: // MapNodeObserver

        virtual void setMapNode( MapNode* mapNode );

        virtual MapNode* getMapNode() { return _mapNode.get(); }

    protected:

        /** dtor */
        virtual ~UTMGraticule() { }

    private:
        osg::ref_ptr<const Profile>        _profile;
        osg::ref_ptr<const FeatureProfile> _featureProfile;

        osg::observer_ptr<MapNode> _mapNode;
        osg::Group*                _root;

        osg::ref_ptr<osg::ClipPlane> _clipPlane;

        void ctor();
        void rebuild();
        UTMData _utmData;
    };

    
    /**
     * Extension that lets you load and configure an UTM Graticule from an earth file.
     * Usage:
     *    <utm_graticule>
     *       ...
     *    </utm_graticule>
     */
    class UTMGraticuleExtension : public Extension,
                                  public ExtensionInterface<MapNode>,
                                  public UTMGraticuleOptions
    {
    public:
        META_Object(osgearth_utm_graticule, UTMGraticuleExtension);

        // CTORs
        UTMGraticuleExtension() { }
        UTMGraticuleExtension(const UTMGraticuleOptions& options) : UTMGraticuleOptions(options) { }

        // DTOR
        virtual ~UTMGraticuleExtension() { }


    public: // Extension

        virtual const ConfigOptions& getConfigOptions() const { return *this; }


    public: // ExtensionInterface<MapNode>

        bool connect(MapNode* mapNode) {
            _layer = new ModelLayer("UTM Graticule", new UTMGraticule(mapNode, *this));
            mapNode->getMap()->addLayer(_layer.get());
            return true;
        }

        bool disconnect(MapNode* mapNode) {
            mapNode->getMap()->removeLayer(_layer.get());
            //mapNode->onModelLayerRemoved(_layer.get());
            return true;
        }


    protected: // Object
        UTMGraticuleExtension(const UTMGraticuleExtension& rhs, const osg::CopyOp& op) { }

        osg::ref_ptr<ModelLayer> _layer;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_UTM_GRATICLE
